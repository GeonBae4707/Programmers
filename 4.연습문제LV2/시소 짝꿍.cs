//// https://school.programmers.co.kr/learn/courses/30/lessons/152996

//문제 설명
//어느 공원 놀이터에는 시소가 하나 설치되어 있습니다. 이 시소는 중심으로부터 2(m), 3(m), 4(m) 거리의 지점에 좌석이 하나씩 있습니다.
//이 시소를 두 명이 마주 보고 탄다고 할 때, 시소가 평형인 상태에서 각각에 의해 시소에 걸리는 토크의 크기가 서로 상쇄되어 완전한 균형을 이룰 수 있다면 그 두 사람을 시소 짝꿍이라고 합니다. 즉, 탑승한 사람의 무게와 시소 축과 좌석 간의 거리의 곱이 양쪽 다 같다면 시소 짝꿍이라고 할 수 있습니다.
//사람들의 몸무게 목록 weights이 주어질 때, 시소 짝꿍이 몇 쌍 존재하는지 구하여 return 하도록 solution 함수를 완성해주세요.

//제한 사항
//2 ≤ weights의 길이 ≤ 100,000
//100 ≤ weights[i] ≤ 1,000
//몸무게 단위는 N(뉴턴)으로 주어집니다.
//몸무게는 모두 정수입니다.
//입출력 예
//weights	result
//[100,180,360,100,270]	4
//입출력 예 설명
//{100, 100} 은 서로 같은 거리에 마주보고 앉으면 균형을 이룹니다.
//{180, 360} 은 각각 4(m), 2(m) 거리에 마주보고 앉으면 균형을 이룹니다.
//{180, 270} 은 각각 3(m), 2(m) 거리에 마주보고 앉으면 균형을 이룹니다.
//{270, 360} 은 각각 4(m), 3(m) 거리에 마주보고 앉으면 균형을 이룹니다.문제 설명
//어느 공원 놀이터에는 시소가 하나 설치되어 있습니다. 이 시소는 중심으로부터 2(m), 3(m), 4(m) 거리의 지점에 좌석이 하나씩 있습니다.
//이 시소를 두 명이 마주 보고 탄다고 할 때, 시소가 평형인 상태에서 각각에 의해 시소에 걸리는 토크의 크기가 서로 상쇄되어 완전한 균형을 이룰 수 있다면 그 두 사람을 시소 짝꿍이라고 합니다. 즉, 탑승한 사람의 무게와 시소 축과 좌석 간의 거리의 곱이 양쪽 다 같다면 시소 짝꿍이라고 할 수 있습니다.
//사람들의 몸무게 목록 weights이 주어질 때, 시소 짝꿍이 몇 쌍 존재하는지 구하여 return 하도록 solution 함수를 완성해주세요.

//제한 사항
//2 ≤ weights의 길이 ≤ 100,000
//100 ≤ weights[i] ≤ 1,000
//몸무게 단위는 N(뉴턴)으로 주어집니다.
//몸무게는 모두 정수입니다.
//입출력 예
//weights	result
//[100,180,360,100,270]	4
//입출력 예 설명
//{100, 100} 은 서로 같은 거리에 마주보고 앉으면 균형을 이룹니다.
//{180, 360} 은 각각 4(m), 2(m) 거리에 마주보고 앉으면 균형을 이룹니다.
//{180, 270} 은 각각 3(m), 2(m) 거리에 마주보고 앉으면 균형을 이룹니다.
//{270, 360} 은 각각 4(m), 3(m) 거리에 마주보고 앉으면 균형을 이룹니다.



using System;

public class Solution
{
    public long solution(int[] weights)
    {
        long answer = 0;

        int[] arrayDistance = new int[4001];
        int[] arrayCount = new int[1001];

        for (int i = 0; i < weights.Length; i++)
        {
            answer += arrayDistance[weights[i] * 2];
            answer += arrayDistance[weights[i] * 3];
            answer += arrayDistance[weights[i] * 4];

            if (arrayCount[weights[i]] > 0)     // 같은무게는 3번 추가되니 2번은 빼줌
            {
                answer -= arrayCount[weights[i]] * 2;
            }

            arrayCount[weights[i]]++;   // 무게 카운트
            arrayDistance[weights[i] * 2]++;   // 거리 카운트
            arrayDistance[weights[i] * 3]++;
            arrayDistance[weights[i] * 4]++;
        }

        return answer;
    }
}




//using System;

//public class Solution
//{
//    public long solution(int[] weights)
//    {
//        long answer = 0;

//        int[] weight2 = new int[weights.Length];
//        int[] weight3 = new int[weights.Length];
//        int[] weight4 = new int[weights.Length];

//        for (int i = 0; i < weights.Length; i++)
//        {
//            weight2[i] = weights[i] * 2;
//            weight3[i] = weights[i] * 3;
//            weight4[i] = weights[i] * 4;
//        }

//        for (int i = 0; i < weights.Length; i++)
//        {
//            for (int j = i + 1; j < weights.Length; j++)
//            {
//                if (weights[i] == weights[j] ||
//                    weight2[i] == weight3[j] || weight2[i] == weight4[j] ||
//                    weight3[i] == weight2[j] || weight3[i] == weight4[j] ||
//                    weight4[i] == weight2[j] || weight4[i] == weight3[j])
//                {
//                    answer++;
//                    continue;
//                }
//            }
//        }

//        return answer;
//    }
//}